package ar.edu.dds.tpa;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import ar.edu.dds.tpa.geolocalizacion.*;
import ar.edu.dds.tpa.model.*;

public class CalculoDeCercaniaTest {
	Posicion posicionDeUsuario1;
	Posicion posicionDeUsuario2;
	Posicion posicionDeUsuario3;
	Posicion posicionDeUsuario4;
	ParadaDeColectivo bondi114;
<<<<<<< HEAD
	LocalComercial unLocalDeDiarios1;
=======
	KioscoDeDiario kioscoDeDarioVerde1;
	LocalComercial unLocalDeDiario1;
	CGP cgpDeFlores;
	Servicio rentas;
	Servicio multas;
	List<Point> puntos;
	Polygon comunaDeFlores;
>>>>>>> Emi
	Banco bancoPatagonia;
	CGP cgpDeFlores;
	List<Posicion> puntos;
	Poligono barrioDeFlores;

	@Before
	public void inicializar() {
<<<<<<< HEAD
		bondi114 = new ParadaDeColectivo("114", new Posicion(200.0006, 100.0));


		unLocalDeDiarios1 = new LocalComercial("Diarin", new Posicion(100.000002, 50.0),
				new Rubro("Kiosco de diarios", 2.00));

		puntos = new ArrayList<Posicion>(Arrays.asList(new Posicion(10.0, 10.0), new Posicion(10.0, -10.0),
				new Posicion(-10.0, 10.0), new Posicion(-10.0, -10.0)));
		barrioDeFlores = new Poligono(puntos);

		cgpDeFlores = new CGP("CGPFlores", new Posicion(100.0, 5.0));
		cgpDeFlores.agregarZonaDeCobertura(barrioDeFlores);

		bancoPatagonia = new Banco("Banco Patagonia", new Posicion(100.000004, 50.0));

		posicionDeUsuario1 = new Posicion(100.000001, 50.0);
		posicionDeUsuario2 = new Posicion(200.0005, 100.0);
		posicionDeUsuario3 = new Posicion(5.0, 4.0);
		posicionDeUsuario4 = new Posicion(100.0, 100.0);
=======
		bondi114 = new ParadaDeColectivo("114", new Point(200.0006, 100.0));
		
		kioscoDeDarioVerde1 = new KioscoDeDiario(null);
		
		
		unLocalDeDiario1 = new LocalComercial("Diarin", new Point(100.000002, 50.0), kioscoDeDarioVerde1);
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.MONDAY, new RangoDeHorario(LocalTime.of(9, 0), LocalTime.of(18, 0)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.TUESDAY, new RangoDeHorario(LocalTime.of(10, 0), LocalTime.of(17, 0)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.WEDNESDAY, new RangoDeHorario(LocalTime.of(10, 30), LocalTime.of(19, 0)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.THURSDAY, new RangoDeHorario(LocalTime.of(8, 0), LocalTime.of(11, 0)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.THURSDAY, new RangoDeHorario(LocalTime.of(14, 0), LocalTime.of(19, 0)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.FRIDAY, new RangoDeHorario(LocalTime.of(9, 0), LocalTime.of(12, 15)));
		unLocalDeDiario1.agregarDiaYHorarioDeAtencion(DayOfWeek.THURSDAY, new RangoDeHorario(LocalTime.of(13, 30), LocalTime.of(18, 0)));
		
		rentas = new Servicio("rentas");
		rentas.agregarDiaYHorarioDeAtencion(DayOfWeek.MONDAY, new RangoDeHorario(LocalTime.of(9, 0), LocalTime.of(18, 0)));
		rentas.agregarDiaYHorarioDeAtencion(DayOfWeek.TUESDAY, new RangoDeHorario(LocalTime.of(10, 0), LocalTime.of(17, 0)));
		
		multas = new Servicio("multas");
		multas.agregarDiaYHorarioDeAtencion(DayOfWeek.WEDNESDAY, new RangoDeHorario(LocalTime.of(10, 30), LocalTime.of(19, 0)));
		multas.agregarDiaYHorarioDeAtencion(DayOfWeek.THURSDAY, new RangoDeHorario(LocalTime.of(8, 0), LocalTime.of(11, 0)));
		multas.agregarDiaYHorarioDeAtencion(DayOfWeek.THURSDAY, new RangoDeHorario(LocalTime.of(14, 0), LocalTime.of(19, 0)));
		
		puntos = new ArrayList<Point>(Arrays.asList(new Point(10.0,10.0), new Point(10.0,-10.0), new Point(-10.0,10.0), new Point(-10.0,-10.0)));
		comunaDeFlores = new Polygon(puntos);
		cgpDeFlores = new CGP("CGPFlores", new Point(100.0, 5.0), comunaDeFlores);
		cgpDeFlores.agregarServicio(rentas);
		cgpDeFlores.agregarServicio(multas);
		
		bancoPatagonia = new Banco("Banco Patagonia", new Point(10.0, 10.0));
		
		posicionDeUsuario1 = new Point(100.000001,50.0);
		posicionDeUsuario2 = new Point(200.0005,100.0);
		posicionDeUsuario3 = new Point(5.0, 5.0);
		posicionDeUsuario4 = new Point(100.0, 100.0);
		
		
		
>>>>>>> Emi
	}

	@Test
	public void elUsuario1EstaCercaDelBanco() {
		assertTrue(bancoPatagonia.estaCercaDe(posicionDeUsuario1));
	}

	@Test
	public void elUsuario1EstaCercaDelLocalDeDiarios() {
		assertTrue(unLocalDeDiarios1.estaCercaDe(posicionDeUsuario1));
	}

	@Test
	public void elUsuario2NoEstaCercaDeLaParadaDel114() {
		assertFalse(bondi114.estaCercaDe(posicionDeUsuario1));
	}

	@Test
	public void elUsuario3EstaCercaDeLaParadaDel114() {
		assertTrue(bondi114.estaCercaDe(posicionDeUsuario2));
	}

	@Test
	public void elUsuario3EstaCercaDelCGP() {
		assertTrue(cgpDeFlores.estaCercaDe(posicionDeUsuario3));
	}

	@Test
	public void elUsuario4NoEstaCercaDelCGP() {
		assertFalse(cgpDeFlores.estaCercaDe(posicionDeUsuario4));
	}
}